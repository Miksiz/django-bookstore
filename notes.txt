The Docker docs contain a section a large section on Security and specifically on rootless mode to avoid this. We will not be covering it here since this is a book on Django, not Docker, but especially if your website stores sensitive information do review the entire Security section closely before going live.

 The final step is to add a trust authentication to the environment
for the db. For large databases with many database users it is recommended to be more explicit
with permissions, but this setting is a good choice when there is just one developer.

A very useful third-party package is django-extensions226 which comes with a number of Django
command extensions. Among them is shell_plus, which automatically loads all app models in
the shell. This can save a lot of time over the life of a Django project and makes working with the
Django ORM much easier

To generate secret key:
import secrets
print(secrets.token_urlsafe(38))

A fun 3rd party package django-admin-honeypot294 will generate a fake admin log in screen
and email site admins295 the IP address of anyone trying to attack your site at /admin. These IP
addresses can then be added to a blocked address list for the site.
